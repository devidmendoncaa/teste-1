# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - azure-prod
    - azure-dev
    - hml
resources:
- repo: self

variables:
  - group: var-ms-feriados

  # Container registry service connection established during pipeline creation 
  # - name: dockerRegistryServiceConnection
  # value: '$(dockerconnection)'

  - name: imageRepository
    value: 'ms-feriados'

  - name: containerRegistry
    value: 'crakshomol001.azurecr.io'

  - name: solutionName
    value: 'Hiper.Microservices.Feriados'
  
  - name: solutionDirectory
    value: './src'
  
  - name: buildConfiguration
    value: 'Release'

  - name: dockerfilePath
    value: '$(Build.SourcesDirectory)/src/Hiper.Microservices.Feriados.Api/Dockerfile'
  
  - name: tag
    value: '$(Build.BuildId)'

  - name: aks-namespace
    value: 'default'

  # Agent VM image name
  - name: vmImageName
    value: 'ubuntu-latest'
  
  - name: isPublicacao
    value: ${{ or(eq(variables['Build.SourceBranchName'], 'master'), eq(variables['Build.SourceBranchName'], 'release'), eq(variables['Build.SourceBranchName'], 'hml')) }}

stages:

- stage: dev
  displayName: Development
  jobs:
    - job:
      steps:
      - task: DotNetCoreCLI@2
        displayName: dotnet restore
        inputs:
          command: 'restore'
          projects: '$(solutionDirectory)/$(solutionName).sln'
          restoreArguments: '-s "https://api.nuget.org/v3/index.json" -s "http://nuget.sistemahiper.com.br/nuget"'
          feedsToUse: 'select'
          includeNuGetOrg: false
      
      - task: DotNetCoreCLI@2
        displayName: dotnet build
        inputs:
          command: 'build'
          projects: '$(solutionDirectory)/$(solutionName).sln'
          arguments: '-c $(buildConfiguration)'
      
      - task: DotNetCoreCLI@2
        displayName: dotnet test
        inputs:
          command: 'test'
          projects: '$(solutionDirectory)/$(solutionName).sln'
          arguments: '/p:CoverletOutput=TestsResult/ /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'

    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          containerRegistry: 'aks-acr'
          repository: '$(imageRepository)'
          command: 'buildAndPush'
          Dockerfile: '$(dockerfilePath)'
          buildContext: '$(Build.SourcesDirectory)/src'
          tags: |
            $(tag)
            latest
      - upload: manifests
      # - publish: manifests
        artifact: manifests
    
    - deployment: Deploy
      displayName: Deploy
      pool:
        vmImage: $(vmImageName)
      environment: 'microservices.default'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: KubernetesManifest@0
              displayName: Create imagePullSecret
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'aks-kubernetes'
                namespace: '$(aks-namespace)'
                secretType: 'dockerRegistry'
                secretName: 'akssecret'
                dockerRegistryEndpoint: 'aks-acr'
            - task: KubernetesManifest@0
              displayName: Create ConnectionStrings__FeriadosContext secret
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'aks-kubernetes'
                namespace: '$(aks-namespace)'
                secretType: 'generic'
                secretName: 'ms-feriados'
                secretArguments: '--from-literal=ConnectionStrings__FeriadosContext="$(MSFERIADOS_DB)"'
              env:
                MSFERIADOS_DB: $(MSFERIADOS_DB)
            - task: KubernetesManifest@0
              displayName: Deploy to Kubernetes cluster
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: '$(vark8s)'
                namespace: '$(aks-namespace)'
                manifests: |
                  $(Pipeline.Workspace)/manifests/deployment.yml
                  $(Pipeline.Workspace)/manifests/service.yml
                  $(Pipeline.Workspace)/manifests/ingress.yml
                imagePullSecrets: '$(imagePullSecret)'
            - task: Kubernetes@1
              displayName: Deployment rollout
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: '$(vark8s)'
                namespace: '$(aks-namespace)'
                command: 'rollout'
                arguments: 'restart deployment/$(imageRepository)'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'

- stage: hml
  displayName: Homolog
  dependsOn: dev
  condition: succeeded('dev')
  jobs:
    - job:
      steps:
      - task: DotNetCoreCLI@2
        displayName: dotnet restore
        inputs:
          command: 'restore'
          projects: '$(solutionDirectory)/$(solutionName).sln'
          restoreArguments: '-s "https://api.nuget.org/v3/index.json" -s "http://nuget.sistemahiper.com.br/nuget"'
          feedsToUse: 'select'
          includeNuGetOrg: false
      
      - task: DotNetCoreCLI@2
        displayName: dotnet build
        inputs:
          command: 'build'
          projects: '$(solutionDirectory)/$(solutionName).sln'
          arguments: '-c $(buildConfiguration)'
      
      - task: DotNetCoreCLI@2
        displayName: dotnet test
        inputs:
          command: 'test'
          projects: '$(solutionDirectory)/$(solutionName).sln'
          arguments: '/p:CoverletOutput=TestsResult/ /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'

    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          containerRegistry: 'aks-acr'
          repository: '$(imageRepository)'
          command: 'buildAndPush'
          Dockerfile: '$(dockerfilePath)'
          buildContext: '$(Build.SourcesDirectory)/src'
          tags: |
            $(tag)
            latest
      - upload: manifests
      # - publish: manifests
        artifact: manifests
    
    - deployment: Deploy
      displayName: Deploy
      pool:
        vmImage: $(vmImageName)
      environment: 'microservices.default'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: KubernetesManifest@0
              displayName: Create imagePullSecret
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'aks-kubernetes'
                namespace: '$(aks-namespace)'
                secretType: 'dockerRegistry'
                secretName: 'akssecret'
                dockerRegistryEndpoint: 'aks-acr'
            - task: KubernetesManifest@0
              displayName: Create ConnectionStrings__FeriadosContext secret
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'aks-kubernetes'
                namespace: '$(aks-namespace)'
                secretType: 'generic'
                secretName: 'ms-feriados'
                secretArguments: '--from-literal=ConnectionStrings__FeriadosContext="$(MSFERIADOS_DB)"'
              env:
                MSFERIADOS_DB: $(MSFERIADOS_DB)
            - task: KubernetesManifest@0
              displayName: Deploy to Kubernetes cluster
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: '$(vark8s)'
                namespace: '$(aks-namespace)'
                manifests: |
                  $(Pipeline.Workspace)/manifests/deployment.yml
                  $(Pipeline.Workspace)/manifests/service.yml
                  $(Pipeline.Workspace)/manifests/ingress.yml
                imagePullSecrets: '$(imagePullSecret)'
            - task: Kubernetes@1
              displayName: Deployment rollout
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: '$(vark8s)'
                namespace: '$(aks-namespace)'
                command: 'rollout'
                arguments: 'restart deployment/$(imageRepository)'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'

- stage: prd
  displayName: Production
  dependsOn: hml
  condition: succeeded('hml')
  jobs:
    - job:
      steps:
      - task: DotNetCoreCLI@2
        displayName: dotnet restore
        inputs:
          command: 'restore'
          projects: '$(solutionDirectory)/$(solutionName).sln'
          restoreArguments: '-s "https://api.nuget.org/v3/index.json" -s "http://nuget.sistemahiper.com.br/nuget"'
          feedsToUse: 'select'
          includeNuGetOrg: false
      
      - task: DotNetCoreCLI@2
        displayName: dotnet build
        inputs:
          command: 'build'
          projects: '$(solutionDirectory)/$(solutionName).sln'
          arguments: '-c $(buildConfiguration)'
      
      - task: DotNetCoreCLI@2
        displayName: dotnet test
        inputs:
          command: 'test'
          projects: '$(solutionDirectory)/$(solutionName).sln'
          arguments: '/p:CoverletOutput=TestsResult/ /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'

    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: Docker@2
        displayName: Build and push an image to container registry
        inputs:
          containerRegistry: 'aks-acr'
          repository: '$(imageRepository)'
          command: 'buildAndPush'
          Dockerfile: '$(dockerfilePath)'
          buildContext: '$(Build.SourcesDirectory)/src'
          tags: |
            $(tag)
            latest
      - upload: manifests
      # - publish: manifests
        artifact: manifests
    
    - deployment: Deploy
      displayName: Deploy
      pool:
        vmImage: $(vmImageName)
      environment: 'microservices.default'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: KubernetesManifest@0
              displayName: Create imagePullSecret
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'aks-kubernetes'
                namespace: '$(aks-namespace)'
                secretType: 'dockerRegistry'
                secretName: 'akssecret'
                dockerRegistryEndpoint: 'aks-acr'
            - task: KubernetesManifest@0
              displayName: Create ConnectionStrings__FeriadosContext secret
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: 'aks-kubernetes'
                namespace: '$(aks-namespace)'
                secretType: 'generic'
                secretName: 'ms-feriados'
                secretArguments: '--from-literal=ConnectionStrings__FeriadosContext="$(MSFERIADOS_DB)"'
              env:
                MSFERIADOS_DB: $(MSFERIADOS_DB)
            - task: KubernetesManifest@0
              displayName: Deploy to Kubernetes cluster
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: '$(vark8s)'
                namespace: '$(aks-namespace)'
                manifests: |
                  $(Pipeline.Workspace)/manifests/deployment.yml
                  $(Pipeline.Workspace)/manifests/service.yml
                  $(Pipeline.Workspace)/manifests/ingress.yml
                imagePullSecrets: '$(imagePullSecret)'
            - task: Kubernetes@1
              displayName: Deployment rollout
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: '$(vark8s)'
                namespace: '$(aks-namespace)'
                command: 'rollout'
                arguments: 'restart deployment/$(imageRepository)'
                secretType: 'dockerRegistry'
                containerRegistryType: 'Azure Container Registry'
